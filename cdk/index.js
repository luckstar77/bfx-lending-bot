"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LambdaCronStack = void 0;
const events = require("@aws-cdk/aws-events");
const targets = require("@aws-cdk/aws-events-targets");
const lambda = require("@aws-cdk/aws-lambda");
const cdk = require("@aws-cdk/core");
require("dotenv").config();
const { API_KEY = "", API_SECRET = "", SYMBOL = "fUSD", EACH_OFFER = "300", BASE_RATE = "0.04", JUMP_RATE = "0.06", KEEP_MONEY = "0" } = process.env;
class LambdaCronStack extends cdk.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        const env = {
            NODE_ENV: "production",
            API_KEY,
            API_SECRET,
            SYMBOL,
            EACH_OFFER,
            BASE_RATE,
            JUMP_RATE,
            KEEP_MONEY
        };
        console.log(env);
        const lambdaFn = new lambda.Function(this, "Singleton", {
            code: lambda.Code.fromAsset("./lambda.zip"),
            handler: "index.handler",
            runtime: lambda.Runtime.NODEJS_12_X,
            environment: env,
            timeout: cdk.Duration.seconds(10),
            retryAttempts: 0
        });
        const rule = new events.Rule(this, "Rule", {
            schedule: events.Schedule.expression("rate(5 minutes)")
        });
        rule.addTarget(new targets.LambdaFunction(lambdaFn));
    }
}
exports.LambdaCronStack = LambdaCronStack;
const app = new cdk.App();
new LambdaCronStack(app, "bfx-bot");
app.synth();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw4Q0FBK0M7QUFDL0MsdURBQXdEO0FBQ3hELDhDQUErQztBQUMvQyxxQ0FBc0M7QUFFdEMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDO0FBRTNCLE1BQU0sRUFDSixPQUFPLEdBQUcsRUFBRSxFQUNaLFVBQVUsR0FBRyxFQUFFLEVBQ2YsTUFBTSxHQUFHLE1BQU0sRUFDZixVQUFVLEdBQUcsS0FBSyxFQUNsQixTQUFTLEdBQUcsTUFBTSxFQUNsQixTQUFTLEdBQUcsTUFBTSxFQUNsQixVQUFVLEdBQUcsR0FBRyxFQUNqQixHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUM7QUFFaEIsTUFBYSxlQUFnQixTQUFRLEdBQUcsQ0FBQyxLQUFLO0lBQzVDLFlBQVksS0FBYyxFQUFFLEVBQVUsRUFBRSxLQUFzQjtRQUM1RCxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUV4QixNQUFNLEdBQUcsR0FBRztZQUNWLFFBQVEsRUFBRSxZQUFZO1lBQ3RCLE9BQU87WUFDUCxVQUFVO1lBQ1YsTUFBTTtZQUNOLFVBQVU7WUFDVixTQUFTO1lBQ1QsU0FBUztZQUNULFVBQVU7U0FDWCxDQUFDO1FBQ0YsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNqQixNQUFNLFFBQVEsR0FBRyxJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLFdBQVcsRUFBRTtZQUN0RCxJQUFJLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDO1lBQzNDLE9BQU8sRUFBRSxlQUFlO1lBQ3hCLE9BQU8sRUFBRSxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQVc7WUFDbkMsV0FBVyxFQUFFLEdBQUc7WUFDaEIsT0FBTyxFQUFFLEdBQUcsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQztZQUNqQyxhQUFhLEVBQUUsQ0FBQztTQUNqQixDQUFDLENBQUM7UUFFSCxNQUFNLElBQUksR0FBRyxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRTtZQUN6QyxRQUFRLEVBQUUsTUFBTSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsaUJBQWlCLENBQUM7U0FDeEQsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLE9BQU8sQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztJQUN2RCxDQUFDO0NBQ0Y7QUE5QkQsMENBOEJDO0FBRUQsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7QUFDMUIsSUFBSSxlQUFlLENBQUMsR0FBRyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0FBQ3BDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBldmVudHMgPSByZXF1aXJlKFwiQGF3cy1jZGsvYXdzLWV2ZW50c1wiKTtcbmltcG9ydCB0YXJnZXRzID0gcmVxdWlyZShcIkBhd3MtY2RrL2F3cy1ldmVudHMtdGFyZ2V0c1wiKTtcbmltcG9ydCBsYW1iZGEgPSByZXF1aXJlKFwiQGF3cy1jZGsvYXdzLWxhbWJkYVwiKTtcbmltcG9ydCBjZGsgPSByZXF1aXJlKFwiQGF3cy1jZGsvY29yZVwiKTtcblxucmVxdWlyZShcImRvdGVudlwiKS5jb25maWcoKTtcblxuY29uc3Qge1xuICBBUElfS0VZID0gXCJcIixcbiAgQVBJX1NFQ1JFVCA9IFwiXCIsXG4gIFNZTUJPTCA9IFwiZlVTRFwiLFxuICBFQUNIX09GRkVSID0gXCIzMDBcIixcbiAgQkFTRV9SQVRFID0gXCIwLjA0XCIsXG4gIEpVTVBfUkFURSA9IFwiMC4wNlwiLFxuICBLRUVQX01PTkVZID0gXCIwXCJcbn0gPSBwcm9jZXNzLmVudjtcblxuZXhwb3J0IGNsYXNzIExhbWJkYUNyb25TdGFjayBleHRlbmRzIGNkay5TdGFjayB7XG4gIGNvbnN0cnVjdG9yKHNjb3BlOiBjZGsuQXBwLCBpZDogc3RyaW5nLCBwcm9wcz86IGNkay5TdGFja1Byb3BzKSB7XG4gICAgc3VwZXIoc2NvcGUsIGlkLCBwcm9wcyk7XG5cbiAgICBjb25zdCBlbnYgPSB7XG4gICAgICBOT0RFX0VOVjogXCJwcm9kdWN0aW9uXCIsXG4gICAgICBBUElfS0VZLFxuICAgICAgQVBJX1NFQ1JFVCxcbiAgICAgIFNZTUJPTCxcbiAgICAgIEVBQ0hfT0ZGRVIsXG4gICAgICBCQVNFX1JBVEUsXG4gICAgICBKVU1QX1JBVEUsXG4gICAgICBLRUVQX01PTkVZXG4gICAgfTtcbiAgICBjb25zb2xlLmxvZyhlbnYpO1xuICAgIGNvbnN0IGxhbWJkYUZuID0gbmV3IGxhbWJkYS5GdW5jdGlvbih0aGlzLCBcIlNpbmdsZXRvblwiLCB7XG4gICAgICBjb2RlOiBsYW1iZGEuQ29kZS5mcm9tQXNzZXQoXCIuL2xhbWJkYS56aXBcIiksXG4gICAgICBoYW5kbGVyOiBcImluZGV4LmhhbmRsZXJcIixcbiAgICAgIHJ1bnRpbWU6IGxhbWJkYS5SdW50aW1lLk5PREVKU18xMl9YLFxuICAgICAgZW52aXJvbm1lbnQ6IGVudixcbiAgICAgIHRpbWVvdXQ6IGNkay5EdXJhdGlvbi5zZWNvbmRzKDEwKSxcbiAgICAgIHJldHJ5QXR0ZW1wdHM6IDBcbiAgICB9KTtcblxuICAgIGNvbnN0IHJ1bGUgPSBuZXcgZXZlbnRzLlJ1bGUodGhpcywgXCJSdWxlXCIsIHtcbiAgICAgIHNjaGVkdWxlOiBldmVudHMuU2NoZWR1bGUuZXhwcmVzc2lvbihcInJhdGUoNSBtaW51dGVzKVwiKVxuICAgIH0pO1xuXG4gICAgcnVsZS5hZGRUYXJnZXQobmV3IHRhcmdldHMuTGFtYmRhRnVuY3Rpb24obGFtYmRhRm4pKTtcbiAgfVxufVxuXG5jb25zdCBhcHAgPSBuZXcgY2RrLkFwcCgpO1xubmV3IExhbWJkYUNyb25TdGFjayhhcHAsIFwiYmZ4LWJvdFwiKTtcbmFwcC5zeW50aCgpO1xuIl19